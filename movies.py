import logging
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
import requests

# –ò–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–∞ –∏ API-–∫–ª—é—á–∞ –∏–∑ config.py
from config import TOKEN, TMDB_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def send_welcome(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, –ñ–µ–Ω–µ—á–∫–∞! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
                       "/find <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º\n"
                       "/popular - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã")

# –ö–æ–º–∞–Ω–¥–∞ /find - –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
@router.message(Command("find"))
async def find_movie(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        command, *args = message.text.split(maxsplit=1)  # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        movie_name = args[0] if args else None  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞)

        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not movie_name:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /find.")
            return

        # –ò—â–µ–º —Ñ–∏–ª—å–º
        await search_and_send_movie(message, movie_name)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å–º–∞
@router.message()
async def handle_movie_name(message: Message):
    try:
        movie_name = message.text  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ ‚Äî —ç—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        await search_and_send_movie(message, movie_name)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
async def search_and_send_movie(message: Message, movie_name: str):
    try:
        logging.info(f"–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞: {movie_name}")

        # –ó–∞–ø—Ä–æ—Å –∫ TMDb API —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
        url = f'https://api.themoviedb.org/3/search/movie?api_key={TMDB_API_KEY}&query={movie_name}&language=ru'
        response = requests.get(url)
        if response.status_code == 200:
            movies = response.json()['results']
            if movies:
                movie = movies[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                title = movie['title']
                overview = movie['overview']
                rating = movie['vote_average']
                poster_path = movie['poster_path']
                poster_url = f"https://image.tmdb.org/t/p/w500{poster_path}" if poster_path else None

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                reply_text = f"üé¨ <b>{title}</b>\n\n"
                reply_text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n\n"
                reply_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {overview}\n\n"

                if poster_url:
                    await message.reply_photo(poster_url, caption=reply_text, parse_mode=ParseMode.HTML)
                else:
                    await message.reply(reply_text, parse_mode=ParseMode.HTML)
            else:
                await message.reply("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        else:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /popular - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã
@router.message(Command("popular"))
async def popular_movies(message: Message):
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ TMDb API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
        url = f'https://api.themoviedb.org/3/movie/popular?api_key={TMDB_API_KEY}&language=ru'
        response = requests.get(url)

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: {response.json()}")

        if response.status_code == 200:
            movies = response.json().get('results', [])  # –ë–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
            if not movies:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.")
                return

            # –ë–µ—Ä—ë–º —Ç–æ–ø-5 —Ñ–∏–ª—å–º–æ–≤
            top_movies = movies[:5]
            reply_text = "üçø <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã:</b>\n\n"
            for movie in top_movies:
                title = movie.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                rating = movie.get('vote_average', '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                reply_text += f"üé¨ <b>{title}</b> (‚≠ê {rating})\n"

            await message.reply(reply_text, parse_mode=ParseMode.HTML)
        else:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")
# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
dp.include_router(router)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    dp.run_polling(bot, skip_updates=True)